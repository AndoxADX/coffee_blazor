@using TG.Blazor.IndexedDB
@using HCB.Internal.Web.Data
@using HCB.Internal.Web.Data.Entity
@using Microsoft.Extensions.Logging
@inject ILogger<Index> Logger
@inject IndexedDBManager DbManager
@inject Context context
@page "/IndexDB"

<h1>Hello, world!</h1>

Total Records @name.


<button class="btn btn-primary" @onclick="AddRecords">Add Records</button>

<button class="btn btn-primary" @onclick="GetRecords">Get Records</button>

<button class="btn btn-primary" @onclick="ResetDB">Delete DB</button>


@if(records is not null)
{
    <HCB.Internal.Web.RCL.BasicTable lists="records" TItem="Person"></HCB.Internal.Web.RCL.BasicTable>
}

@code{
    [Parameter]
    public string name { get; set; }
    public IList<Person> records { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetRecords();
    }
    private async Task GetRecords()
    {
        @* await DbManager.Prompt("Something"); *@
        records = await context.personStore.Filter(p => p.FirstName, "First");
        name = records.Count + "";
    }
    private async Task ResetDB()
    {
        await context.ResetDb();
        await GetRecords();
    }
    private async Task AddRecords()
    {
        try
        {
            var ran = new Random();
            await context.personStore.Add(new Person()
            {
                FirstName = "First",
                LastName = "Last",
                PhoneNumber = "01" + ran.Next(11111111,100000000)
            });
            await GetRecords();
        }
        catch (Exception ex)
        {
            name = ex.Message;
        }

    }
}